{
  "metadata": {
    "kernelspec": {
      "name": "python",
      "display_name": "Python (Pyodide)",
      "language": "python"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "python",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8"
    }
  },
  "nbformat_minor": 4,
  "nbformat": 4,
  "cells": [
    {
      "cell_type": "code",
      "source": "try:\n    # Attempt to divide by zero to raise an exception\n    result = 10 / 0\nexcept ZeroDivisionError as e:\n    print(f\"Exception detected: {e}\")\n",
      "metadata": {
        "trusted": true
      },
      "outputs": [
        {
          "name": "stdout",
          "text": "Exception detected: division by zero\n",
          "output_type": "stream"
        }
      ],
      "execution_count": 1
    },
    {
      "cell_type": "code",
      "source": "# Function to validate voter age\ndef check_voter_age(age):\n    if age < 18:\n        raise ValueError(\"Voter must be at least 18 years old.\")\n    else:\n        print(\"Voter is eligible.\")\n\n# Testing voter age validity\ntry:\n    # Hardcoded value to simulate user input in environments like Jupyter Notebook\n    age = 20  # Replace this with any valid age for testing\n    check_voter_age(age)\nexcept ValueError as e:\n    print(f\"Error: {e}\")\n",
      "metadata": {
        "trusted": true
      },
      "outputs": [
        {
          "name": "stdout",
          "text": "Voter is eligible.\n",
          "output_type": "stream"
        }
      ],
      "execution_count": 3
    },
    {
      "cell_type": "code",
      "source": "# Function to validate marks\ndef validate_marks(marks):\n    if marks < 0 or marks > 100:\n        raise ValueError(\"Marks must be between 0 and 100.\")\n    else:\n        print(f\"Valid marks: {marks}\")\n\n# Testing student marks validity\ntry:\n    # Hardcoded value to simulate user input in environments like Jupyter Notebook\n    marks = 85  # Replace this with any valid mark (e.g., between 0 and 100) for testing\n    validate_marks(marks)\nexcept ValueError as e:\n    print(f\"Error: {e}\")\n",
      "metadata": {
        "trusted": true
      },
      "outputs": [
        {
          "name": "stdout",
          "text": "Valid marks: 85\n",
          "output_type": "stream"
        }
      ],
      "execution_count": 5
    },
    {
      "cell_type": "code",
      "source": "try:\n    # Attempt to read a file that may not exist\n    file = open('non_existent_file.txt', 'r')\nexcept FileNotFoundError as e:\n    print(f\"File not found error: {e}\")\nexcept Exception as e:\n    print(f\"An error occurred: {e}\")\nelse:\n    print(\"File opened successfully.\")\n    file.close()\nfinally:\n    print(\"This block will always execute.\")\n",
      "metadata": {
        "trusted": true
      },
      "outputs": [
        {
          "name": "stdout",
          "text": "File not found error: [Errno 44] No such file or directory: 'non_existent_file.txt'\nThis block will always execute.\n",
          "output_type": "stream"
        }
      ],
      "execution_count": 6
    },
    {
      "cell_type": "code",
      "source": "import re\n\ndef validate_phone_number(phone_number):\n    # Regex for validating phone number (e.g., 123-456-7890)\n    phone_regex = r'^\\d{3}-\\d{3}-\\d{4}$'\n    if re.match(phone_regex, phone_number):\n        print(\"Valid phone number.\")\n    else:\n        raise ValueError(\"Invalid phone number format. Expected format: XXX-XXX-XXXX.\")\n\ndef validate_email(email):\n    # Regex for validating email (e.g., example@domain.com)\n    email_regex = r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$'\n    if re.match(email_regex, email):\n        print(\"Valid email address.\")\n    else:\n        raise ValueError(\"Invalid email address format.\")\n\n# Simulating user input with hardcoded values\ntry:\n    # Hardcoded values to simulate user input\n    phone_number = \"123-456-7890\"  # Change this to test different phone numbers\n    validate_phone_number(phone_number)\n\n    email = \"example@domain.com\"  # Change this to test different email addresses\n    validate_email(email)\nexcept ValueError as e:\n    print(f\"Error: {e}\")\n",
      "metadata": {
        "trusted": true
      },
      "outputs": [
        {
          "name": "stdout",
          "text": "Valid phone number.\nValid email address.\n",
          "output_type": "stream"
        }
      ],
      "execution_count": 8
    },
    {
      "cell_type": "code",
      "source": "",
      "metadata": {
        "trusted": true
      },
      "outputs": [],
      "execution_count": null
    }
  ]
}